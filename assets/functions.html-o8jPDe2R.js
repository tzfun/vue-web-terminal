import{_ as c}from"./dragging-ixFxSTPw.js";import{_ as i,r as o,o as u,c as r,d as s,e as n,a,w as e,b as p}from"./app-2MhuX9hc.js";const d={},k=p(`<h1 id="advanced-features" tabindex="-1"><a class="header-anchor" href="#advanced-features"><span>Advanced Features</span></a></h1><img src="https://shields.io/github/package-json/v/tzfun/vue-web-terminal/vue2" style="margin-right:8px;"><img src="https://shields.io/github/package-json/v/tzfun/vue-web-terminal/vue3" style="margin-right:8px;"><h2 id="drag" tabindex="-1"><a class="header-anchor" href="#drag"><span>Drag</span></a></h2><p>The plugin provides a drag-and-drop function. When it is turned on, the Terminal window will be a <code>fixed</code> positioned container. Its dragging range is within the entire browser window. It also provides the function of window resizing and fixing. The resizing touch area is at the four corners of the window.</p><p>To enable the drag function, you need to set <a href="./attributes#show-header">show-header</a> to <code>true</code> and configure <a href="./attributes#drag-conf">drag-conf</a>. You can configure the initial window size through the <code>width</code> and <code>height</code> of <a href="./others#dragconfig">DragConfig</a> , and control the initial window position through <code>init</code>. The following is a simple example.</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>terminal</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-terminal<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">show-header</span></span>
<span class="line">          <span class="token attr-name">:drag-conf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{width: 700, height: 500, init:{ x: 50, y: 50 }, pinned: false}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>terminal</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The configuration of <a href="./others#dragconfig">DragConfig</a> is as follows:</p><table><thead><tr><th>Prop</th><th>Description</th><th>type</th></tr></thead><tbody><tr><td>width</td><td>The width of the drag window, which can be a number (in px) or a percentage (relative to the browser window).</td><td>number/string</td></tr><tr><td>height</td><td>Drag window height, which can be a number (in px) or a percentage (relative to the browser window).</td><td>number/string</td></tr><tr><td>zIndex</td><td>Window level, this value can be modified and monitored by the terminal, which can be used for multi-window level control, default 100.</td><td>number</td></tr><tr><td>init</td><td>Window initialization position, if not filled, the default position is in the center of the browser window, where x and y are in px.</td><td><a href="./others#Position">Position</a></td></tr><tr><td>pinned</td><td>Pinned window, once pinned, it cannot be dragged, and the pin will be triggered in the <code>on-click</code> event when the button is clicked to modify this value.</td><td>boolean</td></tr></tbody></table><p>In addition to mouse control, you can also use the <a href="./api#dragging">dragging</a> API to move the window position</p><p><img src="`+c+'" alt="dragging.gif"></p><h2 id="real-time-echo" tabindex="-1"><a class="header-anchor" href="#real-time-echo"><span>Real-time Echo</span></a></h2><p>The default message of terminal is displayed in append mode. When you only need to display the execution process and do not want these contents to exist in the record after the execution, real-time echo is a good choice. For example, when <code>gradle</code> or <code>npm</code> downloads the dependency package, the download progress bar animation is displayed.</p>',13),v=s("code",null,"success",-1),m=s("strong",null,"TerminalFlash",-1),h=p(`<p>Create a flash object through <code>new TerminalFlash()</code> and pass it into the success callback. The flash object provides two methods:</p><ul><li><code>flush(string)</code>: Update the currently displayed content</li><li><code>finish()</code>: End execution</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>TerminalFlash<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-web-terminal&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">onExecCmd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> command<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> flash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TerminalFlash</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">success</span><span class="token punctuation">(</span>flash<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">let</span> flashInterval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        flash<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">This is flash content: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>count <span class="token operator">&gt;=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">clearInterval</span><span class="token punctuation">(</span>flashInterval<span class="token punctuation">)</span></span>
<span class="line">            flash<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ask-for-input" tabindex="-1"><a class="header-anchor" href="#ask-for-input"><span>Ask for input</span></a></h2><p>When you need to ask the user, use this function to obtain the user input content, such as when the user needs to enter the username and password when logging in.</p>`,5),g=s("code",null,"success",-1),b=s("strong",null,"TerminalAsk",-1),f=p(`<p>Create an ask object through <code>new TerminalAsk()</code> and pass it into the success callback. The ask object provides two methods:</p><ul><li><code>ask(options)</code>: Initiate a user query input, options is an object, and its properties are explained as follows: <ul><li><code>question</code>: string, the question asked, or a prefix string that can be understood as user input.</li><li><code>callback</code>: function, callback when the user types enter, the parameter value is the content entered by the user.</li><li><code>autoReview</code>: boolean, whether to automatically append the current display content when the user presses Enter.</li><li><code>isPassword</code>: boolean, whether it is a password input.</li></ul></li><li><code>finish()</code>: End execution</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>TerminalAsk<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-web-terminal&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">onExecCmd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> command<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> asker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TerminalAsk</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">success</span><span class="token punctuation">(</span>asker<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    asker<span class="token punctuation">.</span><span class="token function">ask</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">question</span><span class="token operator">:</span> <span class="token string">&#39;Please input github username: &#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">autoReview</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line">            asker<span class="token punctuation">.</span><span class="token function">ask</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token literal-property property">question</span><span class="token operator">:</span> <span class="token string">&#39;Please input github password: &#39;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token literal-property property">autoReview</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token literal-property property">isPassword</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">//    do something</span></span>
<span class="line">                    asker<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="text-editor" tabindex="-1"><a class="header-anchor" href="#text-editor"><span>Text Editor</span></a></h2><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3>`,5),y=p(`<p>A simple example:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">onExecCmd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> command<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    TerminalApi<span class="token punctuation">.</span><span class="token function">textEditorOpen</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;Please edit this file&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">onClose</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;User editing is complete, text result:&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token string">&quot;options:&quot;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">closeEditor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    TerminalApi<span class="token punctuation">.</span><span class="token function">textEditorClose</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fromUser</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="slot-custom-style" tabindex="-1"><a class="header-anchor" href="#slot-custom-style"><span>Slot custom style</span></a></h3>`,3),w=p(`<ul><li><code>value</code>: The edited text content, you need to bind it with <code>v-model</code> in your implemented editor.</li><li><code>onFocus</code>: To get the focus event, you need to bind the <code>@focus</code> event in your editor.</li><li><code>onBlur</code>: Lost focus event, you need to bind the <code>@blur</code> event in your editor.</li></ul><h3 id="custom-shortcut-keys" tabindex="-1"><a class="header-anchor" href="#custom-shortcut-keys"><span>Custom shortcut keys</span></a></h3><p>The plugin provides an <code>onKeydown</code> event, which is the best way to control the Terminal shortcut keys in the <strong>active state</strong>. Here, take the text editor as an example, and set the user to press the shortcut key <code>Ctrl + S</code> to complete the editing and save.</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>terminal</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@exec-cmd</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onExecCmd<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@on-keydown</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onKeydown<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#textEditor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ data }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>editor<span class="token punctuation">&quot;</span></span></span>
<span class="line">                <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>t-text-editor<span class="token punctuation">&quot;</span></span></span>
<span class="line">                <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data.value<span class="token punctuation">&quot;</span></span></span>
<span class="line">                <span class="token attr-name">@focus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data.onFocus<span class="token punctuation">&quot;</span></span></span>
<span class="line">                <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data.onBlur<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>t-text-editor-floor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>t-text-editor-floor-btn<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_textEditorClose(false)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Cancel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>t-text-editor-floor-btn<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_textEditorClose(true)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Save &amp; Close<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>terminal</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> TerminalApi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue-web-terminal&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;TerminalDemo&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;my-terminal&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">enableTextEditor</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">onExecCmd</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> command<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;edit&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        TerminalApi<span class="token punctuation">.</span><span class="token function">textEditorOpen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;Please edit this file&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token function-variable function">onClose</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>enableTextEditor <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">            <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">              <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span></span>
<span class="line">              <span class="token literal-property property">content</span><span class="token operator">:</span> value</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>enableTextEditor <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">onKeydown</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>enableTextEditor <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">&#39;s&#39;</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>ctrlKey<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_textEditorClose</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">_textEditorClose</span><span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      TerminalApi<span class="token punctuation">.</span><span class="token function">textEditorClose</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> option<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function x(q,_){const t=o("RouteLink"),l=o("CommentService");return u(),r("div",null,[k,s("p",null,[n("In the "),a(t,{to:"/events.html#exec-cmd"},{default:e(()=>[n("exec-cmd")]),_:1}),n(" event callback, the "),v,n(" callback function supports passing in the real-time echo processing object "),m,n(".")]),h,s("p",null,[n("In the "),a(t,{to:"/events.html#exec-cmd"},{default:e(()=>[n("exec-cmd")]),_:1}),n(" event callback, the "),g,n(" callback function supports passing in the processing object "),b,n(" of the user input.")]),f,s("p",null,[n("When you need to edit text in Terminal, you can consider using the built-in text editor, which requires the use of two APIs: "),a(t,{to:"/api.html#texteditoropen"},{default:e(()=>[n("textEditorOpen")]),_:1}),n(", "),a(t,{to:"/api.html#texteditorclose"},{default:e(()=>[n("textEditorClose")]),_:1})]),y,s("p",null,[n("If you don't like the default style, you can use "),a(t,{to:"/slots.html"},{default:e(()=>[n("Slot")]),_:1}),n(" to customize the editor style, such as changing to an editor with highlighting function such as Codemirror or VS Code. The slot data has three properties that you need to care about:")]),w,a(l)])}const E=i(d,[["render",x],["__file","functions.html.vue"]]),j=JSON.parse('{"path":"/functions.html","title":"Advanced Features","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Drag","slug":"drag","link":"#drag","children":[]},{"level":2,"title":"Real-time Echo","slug":"real-time-echo","link":"#real-time-echo","children":[]},{"level":2,"title":"Ask for input","slug":"ask-for-input","link":"#ask-for-input","children":[]},{"level":2,"title":"Text Editor","slug":"text-editor","link":"#text-editor","children":[{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":3,"title":"Slot custom style","slug":"slot-custom-style","link":"#slot-custom-style","children":[]},{"level":3,"title":"Custom shortcut keys","slug":"custom-shortcut-keys","link":"#custom-shortcut-keys","children":[]}]}],"git":{"updatedTime":1718693968000,"contributors":[{"name":"tzfun","email":"beifengtz@qq.com","commits":2}]},"filePathRelative":"functions.md"}');export{E as comp,j as data};
