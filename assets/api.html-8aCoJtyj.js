import{_ as d}from"./ele-info-CXOAh1KH.js";import{_ as k,c as m,a as p,b as i,d as e,e as s,f as n,r as o,o as g}from"./app-CUtom3qH.js";const h={};function v(b,a){const c=o("CodeTabs"),r=o("RouteLink"),u=o("CommentService");return g(),m("div",null,[a[7]||(a[7]=p(`<h1 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h1><img src="https://shields.io/github/package-json/v/tzfun/vue-web-terminal/vue2" style="margin-right:8px;"><img src="https://shields.io/github/package-json/v/tzfun/vue-web-terminal/vue3" style="margin-right:8px;"><p>This plugin provides some JS APIs that can actively trigger or capture the behavior of the plug-in, and can also simulate some user behaviors through these APIs.</p><h2 id="calling-methods" tabindex="-1"><a class="header-anchor" href="#calling-methods"><span>Calling Methods</span></a></h2><p>To call the API interface, you need to specify a Terminal instance first, and then call the corresponding API method. There may be multiple Terminal instances on the same page. The plugin distinguishes these different instances through the <a href="./attributes#name">name</a> attribute, so the name attribute should be globally unique.</p><p>There are two ways to call the interface of the corresponding instance: <code>Global Call</code> and <code>Ref Call</code></p><h3 id="global-call" tabindex="-1"><a class="header-anchor" href="#global-call"><span>Global Call</span></a></h3><p>This method can call any Terminal with a given name anywhere. Compared with <code>Ref Call</code>, it does not need to rely on Vue&#39;s reference passing and is relatively more flexible. However, the prerequisite for calling it is to specify the Terminal&#39;s name.</p><p>The method of use is to introduce the global API <code>TerminalApi</code> to call the interface. The first parameter of all interface inputs is the name value of Terminal, and the subsequent parameters are the parameter values of the corresponding interface.</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>terminal</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-terminal<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>terminal</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">import</span> <span class="token punctuation">{</span> TerminalApi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-web-terminal&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">invokeApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            TerminalApi<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ref-call" tabindex="-1"><a class="header-anchor" href="#ref-call"><span>Ref Call</span></a></h3><p>This calling method relies on the reference in Vue. Once the Ref of the specified Dom is obtained, the plug-in API can be called without passing the name value of the Terminal.</p>`,13)),i(c,{id:"32",data:[{id:"Vue2"},{id:"Vue3"}],"tab-id":"vue"},{title0:e(({value:t,isActive:l})=>a[0]||(a[0]=[n("Vue2")])),title1:e(({value:t,isActive:l})=>a[1]||(a[1]=[n("Vue3")])),tab0:e(({value:t,isActive:l})=>a[2]||(a[2]=[s("div",{class:"language-vue line-numbers-mode","data-highlighter":"prismjs","data-ext":"vue","data-title":"vue"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("template")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("terminal")]),n(),s("span",{class:"token attr-name"},"name"),s("span",{class:"token attr-value"},[s("span",{class:"token punctuation attr-equals"},"="),s("span",{class:"token punctuation"},'"'),n("my-terminal"),s("span",{class:"token punctuation"},'"')]),n(),s("span",{class:"token attr-name"},"ref"),s("span",{class:"token attr-value"},[s("span",{class:"token punctuation attr-equals"},"="),s("span",{class:"token punctuation"},'"'),n("myTerminalRef"),s("span",{class:"token punctuation"},'"')]),s("span",{class:"token punctuation"},">")]),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("terminal")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("template")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("script")]),s("span",{class:"token punctuation"},">")]),s("span",{class:"token script"},[s("span",{class:"token language-javascript"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"export"),n(),s("span",{class:"token keyword"},"default"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token literal-property property"},"methods"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token function"},"invokeApi"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),n("$refs"),s("span",{class:"token punctuation"},"."),n("myTerminalRef"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"pushMessage"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"hello world!"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}"),n("  ")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})]),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("script")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[3]||(a[3]=[s("div",{class:"language-vue line-numbers-mode","data-highlighter":"prismjs","data-ext":"vue","data-title":"vue"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("template")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("terminal")]),n(),s("span",{class:"token attr-name"},"name"),s("span",{class:"token attr-value"},[s("span",{class:"token punctuation attr-equals"},"="),s("span",{class:"token punctuation"},'"'),n("my-terminal"),s("span",{class:"token punctuation"},'"')]),n(),s("span",{class:"token attr-name"},"ref"),s("span",{class:"token attr-value"},[s("span",{class:"token punctuation attr-equals"},"="),s("span",{class:"token punctuation"},'"'),n("myTerminalRef"),s("span",{class:"token punctuation"},'"')]),s("span",{class:"token punctuation"},">")]),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("terminal")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("template")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("script")]),n(),s("span",{class:"token attr-name"},"setup"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token script"},[s("span",{class:"token language-javascript"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"const"),n(" myTerminalRef "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"ref"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"const"),n(),s("span",{class:"token function-variable function"},"invokeApi"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  myTerminalRef"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"pushMessage"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"hello world!"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})]),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("script")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),a[8]||(a[8]=p(`<h2 id="interfaces" tabindex="-1"><a class="header-anchor" href="#interfaces"><span>Interfaces</span></a></h2><h3 id="pushmessage" tabindex="-1"><a class="header-anchor" href="#pushmessage"><span>pushMessage</span></a></h3><ul><li><strong>Description</strong>: Push one or more messages to terminal.</li><li><strong>Definition</strong>:</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">pushMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Message <span class="token operator">|</span> Message<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>Example</strong>:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//  Push a text message</span></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//  push a message</span></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;warning&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;WARN&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;This is warning message!&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//  Push multiple messages</span></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;message 1&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;message 2&#39;</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;message 3&#39;</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>References</strong>: <ul><li><a href="./others#message">Message</a></li></ul></li></ul><h3 id="appendmessage" tabindex="-1"><a class="header-anchor" href="#appendmessage"><span>appendMessage</span></a></h3><ul><li><strong>Description</strong>: Append content to the last message. This will only be done if the last message exists and its message type is one of <code>normal</code>, <code>ansi</code>, <code>code</code>, <code>html</code>, otherwise a new message will be pushed.</li><li><strong>Definition</strong>:</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">appendMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>Example</strong>:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">appendMessage</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;This is additional content&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="fullscreen" tabindex="-1"><a class="header-anchor" href="#fullscreen"><span>fullscreen</span></a></h3><ul><li><strong>Description</strong>: Toggle full screen mode</li><li><strong>Definition</strong>:</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">fullscreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>Example</strong>:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">fullscreen</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="isfullscreen" tabindex="-1"><a class="header-anchor" href="#isfullscreen"><span>isFullscreen</span></a></h3><ul><li><strong>Description</strong>: Determine whether the current window is in full screen mode.</li><li><strong>Definition</strong>:</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">isFullscreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>Example</strong>:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> isFullscreen <span class="token operator">=</span> TerminalApi<span class="token punctuation">.</span><span class="token function">isFullscreen</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isFullscreen<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dragging" tabindex="-1"><a class="header-anchor" href="#dragging"><span>dragging</span></a></h3><ul><li><strong>Description</strong>: When the drag function is turned on, you can use this method to change the window position, where the parameter <code>x</code> is the distance from the left border of the terminal to the left border of the browser&#39;s visible range, and <code>y</code> is the distance from the top border of the terminal to the top border of the browser&#39;s visible range, in px.</li><li><strong>Definition</strong>:</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">dragging</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pos<span class="token operator">:</span> Position<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>Example</strong>:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">dragging</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,27)),s("ul",null,[s("li",null,[a[5]||(a[5]=s("strong",null,"References",-1)),a[6]||(a[6]=n(": ")),s("ul",null,[s("li",null,[i(r,{to:"/others.html#position"},{default:e(()=>a[4]||(a[4]=[n("Position")])),_:1})])])])]),a[9]||(a[9]=p(`<h3 id="execute" tabindex="-1"><a class="header-anchor" href="#execute"><span>execute</span></a></h3><ul><li><strong>Description</strong>: Execute a command to the terminal, and the execution process will be echoed in the Terminal window. This is a way to use JS to simulate the user&#39;s execution of commands.</li><li><strong>Definition</strong>:</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">execute</span> <span class="token operator">=</span> <span class="token punctuation">(</span>cmd<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>Example</strong>:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;help :local&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="focus" tabindex="-1"><a class="header-anchor" href="#focus"><span>focus</span></a></h3><ul><li><strong>Description</strong>: Get the terminal input focus. There are three input points in the plugin: <ul><li>For command line input, passing true to the focus method means forcibly obtaining the input focus. Otherwise, it only obtains the cursor focus and causes the terminal to trigger the on-active event.</li><li>Ask user input, get the corresponding input focus when in ask mode.</li><li>Text editor input, when in text editing mode, get the corresponding input box focus. If you use slot to customize the implementation, you need to provide the entry of focus event in the slot.</li></ul></li><li><strong>Definition</strong>:</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">focus</span> <span class="token operator">=</span> <span class="token punctuation">(</span>enforceFocus<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> MouseEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>Example</strong>:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="elementinfo" tabindex="-1"><a class="header-anchor" href="#elementinfo"><span>elementInfo</span></a></h3><ul><li><strong>Description</strong>: Get the Terminal window DOM information. You can use this API to get the Terminal window width and height, the width and height of the displayed content, the location, the width of a single character, etc. The unit is px.</li></ul><div class="hint-container tip"><p class="hint-container-title">Notice</p><p>If your window has been created but not displayed on the page (for example, if v-show is used to control the display), some information may become invalid.</p></div><ul><li><strong>Definition</strong>:</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">elementInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TerminalElementInfo<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>Example</strong>:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> info <span class="token operator">=</span> TerminalApi<span class="token punctuation">.</span><span class="token function">elementInfo</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Result Example</strong>：</li></ul><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;pos&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;x&quot;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;y&quot;</span><span class="token operator">:</span> <span class="token number">100</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;screenWidth&quot;</span><span class="token operator">:</span> <span class="token number">700</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;screenHeight&quot;</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;clientWidth&quot;</span><span class="token operator">:</span> <span class="token number">690</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;clientHeight&quot;</span><span class="token operator">:</span> <span class="token number">490</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;charWidth&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;en&quot;</span><span class="token operator">:</span> <span class="token number">7.2</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;cn&quot;</span><span class="token operator">:</span> <span class="token number">14</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>References</strong>: <ul><li><a href="./others#position">Position</a></li><li><a href="./others#charwidth">CharWidth</a></li><li><a href="./others#terminalelementinfo">TerminalElementInfo</a></li></ul></li></ul><p>The following diagram clearly describes what these values mean: <img src="`+d+`" alt="terminal-ele-info"></p><h3 id="texteditoropen" tabindex="-1"><a class="header-anchor" href="#texteditoropen"><span>textEditorOpen</span></a></h3><ul><li><strong>Description</strong>: Open the text editor. When opening, you can pass in the initial text content and define the close event callback. <code>content</code> is the preset content when opening the editor. If you don&#39;t want to preset any content, you can leave this parameter blank. When the user clicks Close or actively calls the <code>textEditorClose()</code> method, the <code>onClose</code> callback will be triggered. The parameter value is the text content in the current editor and the passed parameter options.</li><li><strong>Definition</strong>:</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">textEditorOpen</span> <span class="token operator">=</span> <span class="token punctuation">(</span>setting<span class="token operator">:</span> EditorSetting<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>Example</strong>:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">textEditorOpen</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;This is the preset content&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">onClose</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Final content: &#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token string">&quot;options:&quot;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>References</strong>: <ul><li><a href="./others#editorsetting">EditorSetting</a></li></ul></li></ul><h3 id="texteditorclose" tabindex="-1"><a class="header-anchor" href="#texteditorclose"><span>textEditorClose</span></a></h3><ul><li><strong>Description</strong>: Close the currently opened text editor. This call will trigger the onClose callback when it is opened, and the options value will be passed to the callback function as a parameter.</li><li><strong>Definition</strong>:</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">textEditorClose</span> <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>Example</strong>:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">textEditorClose</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">textEditorClose</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello! this is close options&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clearlog" tabindex="-1"><a class="header-anchor" href="#clearlog"><span>clearLog</span></a></h3><ul><li><strong>Description</strong>: Clear the current screen log. If the passed parameter is true, the historical command record will also be cleared.</li><li><strong>Definition</strong>:</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">clearLog</span> <span class="token operator">=</span> <span class="token punctuation">(</span>clearCommandHistory<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>Example</strong>:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//  clear screen log</span></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">clearLog</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//  clear command history log</span></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">clearLog</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getcommand" tabindex="-1"><a class="header-anchor" href="#getcommand"><span>getCommand</span></a></h3><ul><li><strong>Description</strong>: Get the command currently being entered.</li><li><strong>Definition</strong>:</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">getCommand</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>Example</strong>:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="setcommand" tabindex="-1"><a class="header-anchor" href="#setcommand"><span>setCommand</span></a></h3><ul><li><strong>Description</strong>: Modify the command currently being entered.</li><li><strong>Definition</strong>:</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">setCommand</span> <span class="token operator">=</span> <span class="token punctuation">(</span>command<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>Example</strong>:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;customCmd -a hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="switchallfoldstate" tabindex="-1"><a class="header-anchor" href="#switchallfoldstate"><span>switchAllFoldState</span></a></h3><ul><li><strong>Description</strong>：Collapse or expand all command groups.</li><li><strong>Definition</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">switchAllFoldState</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>Example</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Collapse all command groups</span></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">switchAllFoldState</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Expand all command groups</span></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">switchAllFoldState</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52)),i(u)])}const x=k(h,[["render",v],["__file","api.html.vue"]]),w=JSON.parse('{"path":"/api.html","title":"API","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Calling Methods","slug":"calling-methods","link":"#calling-methods","children":[{"level":3,"title":"Global Call","slug":"global-call","link":"#global-call","children":[]},{"level":3,"title":"Ref Call","slug":"ref-call","link":"#ref-call","children":[]}]},{"level":2,"title":"Interfaces","slug":"interfaces","link":"#interfaces","children":[{"level":3,"title":"pushMessage","slug":"pushmessage","link":"#pushmessage","children":[]},{"level":3,"title":"appendMessage","slug":"appendmessage","link":"#appendmessage","children":[]},{"level":3,"title":"fullscreen","slug":"fullscreen","link":"#fullscreen","children":[]},{"level":3,"title":"isFullscreen","slug":"isfullscreen","link":"#isfullscreen","children":[]},{"level":3,"title":"dragging","slug":"dragging","link":"#dragging","children":[]},{"level":3,"title":"execute","slug":"execute","link":"#execute","children":[]},{"level":3,"title":"focus","slug":"focus","link":"#focus","children":[]},{"level":3,"title":"elementInfo","slug":"elementinfo","link":"#elementinfo","children":[]},{"level":3,"title":"textEditorOpen","slug":"texteditoropen","link":"#texteditoropen","children":[]},{"level":3,"title":"textEditorClose","slug":"texteditorclose","link":"#texteditorclose","children":[]},{"level":3,"title":"clearLog","slug":"clearlog","link":"#clearlog","children":[]},{"level":3,"title":"getCommand","slug":"getcommand","link":"#getcommand","children":[]},{"level":3,"title":"setCommand","slug":"setcommand","link":"#setcommand","children":[]},{"level":3,"title":"switchAllFoldState","slug":"switchallfoldstate","link":"#switchallfoldstate","children":[]}]}],"git":{"updatedTime":1720188474000,"contributors":[{"name":"tzfun","email":"beifengtz@qq.com","commits":4}]},"filePathRelative":"api.md"}');export{x as comp,w as data};
