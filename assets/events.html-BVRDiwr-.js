import{_ as c,r as i,o as s,c as a,d as e,e as n,a as l,w as r,b as d}from"./app-Dow5uvci.js";const h={},m=d('<h1 id="插件事件" tabindex="-1"><a class="header-anchor" href="#插件事件"><span>插件事件</span></a></h1><img src="https://shields.io/github/package-json/v/tzfun/vue-web-terminal/vue2" style="margin-right:8px;"><img src="https://shields.io/github/package-json/v/tzfun/vue-web-terminal/vue3" style="margin-right:8px;"><h2 id="exec-cmd" tabindex="-1"><a class="header-anchor" href="#exec-cmd"><span>exec-cmd</span></a></h2><ul><li><strong>回调参数</strong>：<code>(commandKey, command, success, failed, name)</code><ul><li>commandKey: <code>string</code>，命令key</li><li>command: <code>string</code>，用户输入的完整命令行</li><li>success: <code>(message?: Message | Array&lt;Message&gt; | string | TerminalFlash | TerminalAsk) =&gt; void; </code>，成功回调函数</li><li>failed: <code>(message: string) =&gt; void;</code>，失败回调函数</li><li>name: <code>string</code>，Terminal实例的名称</li></ul></li><li><strong>说明</strong>：执行自定义命令时触发此事件，<strong>当该事件触发之后必须调用 success 或 failed其中一个回调才认为是本次执行结束，否则命令输入行将不会回显</strong>。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>success回调参数支持多种数据类型，不同数据类型执行逻辑也会不同：</p><ul><li>不传任何参数，立即结束本次执行</li><li>传入一个消息对象 <a href="./others#Message">Message</a> ，将会向记录中追加一条消息，并立即结束本次执行</li><li>传入一个消息对象数组 <a href="./others#Message">Message</a>[] ，将会向记录中追加多条消息，并立即结束本次执行</li><li>传入一个 <code>TerminalFlash</code> 对象，将会进入实时回显处理逻辑，本次执行并不会结束，直到调用 <code>finish()</code></li><li>传入一个 <code>TerminalAsk</code> 对象，将会进入用户询问输入处理逻辑，本次执行并不会结束，直到调用 <code>finish()</code></li></ul></div><h2 id="before-exec-cmd" tabindex="-1"><a class="header-anchor" href="#before-exec-cmd"><span>before-exec-cmd</span></a></h2><ul><li><strong>回调参数</strong>：<code>(commandKey, command, name)</code><ul><li>commandKey: <code>string</code>，命令key</li><li>command: <code>string</code>，用户输入的完整命令行</li><li>name: <code>string</code>，Terminal实例的名称</li></ul></li><li><strong>说明</strong>：用户敲下回车之后，在真正执行命令之前触发</li></ul><h2 id="init-before" tabindex="-1"><a class="header-anchor" href="#init-before"><span>init-before</span></a></h2><ul><li><strong>回调参数</strong>：<code>(name)</code></li><li><strong>说明</strong>：生命周期函数，插件初始化之前触发</li></ul><h2 id="init-complete" tabindex="-1"><a class="header-anchor" href="#init-complete"><span>init-complete</span></a></h2><ul><li><strong>回调参数</strong>：<code>(name)</code></li><li><strong>说明</strong>：生命周期函数，插件初始化完成之后触发</li></ul><h2 id="on-keydown" tabindex="-1"><a class="header-anchor" href="#on-keydown"><span>on-keydown</span></a></h2><ul><li><strong>回调参数</strong>：<code>(event, name)</code><ul><li>event: <code>KeyboardEvent</code>，原生键盘事件</li><li>name: <code>string</code>，Terminal实例的名称</li></ul></li><li><strong>说明</strong>：在获取命令输入光标焦点时，按下任意键后触发</li></ul><h2 id="on-click" tabindex="-1"><a class="header-anchor" href="#on-click"><span>on-click</span></a></h2><ul><li><strong>回调参数</strong>：<code>(key, name)</code><ul><li>key: <code>string</code>，按钮名</li><li>name: <code>string</code>，Terminal实例的名称</li></ul></li><li><strong>说明</strong>：用户点击按钮时触发，参数key为按钮唯一识别，已有按钮：<code>close | minScreen | fullScreen | title | pin</code></li></ul><h2 id="on-active" tabindex="-1"><a class="header-anchor" href="#on-active"><span>on-active</span></a></h2><ul><li><strong>回调参数</strong>：<code>(name)</code></li><li><strong>说明</strong>：窗口活跃时触发</li></ul><h2 id="on-inactive" tabindex="-1"><a class="header-anchor" href="#on-inactive"><span>on-inactive</span></a></h2><ul><li><strong>回调参数</strong>：<code>(name)</code></li><li><strong>说明</strong>：窗口由活跃状态变为不活跃状态时触发</li></ul><h2 id="on-resize" tabindex="-1"><a class="header-anchor" href="#on-resize"><span>on-resize</span></a></h2>',21),g=e("strong",null,"回调参数",-1),u=e("code",null,"(elementInfo, name)",-1),p=e("li",null,[n("name: "),e("code",null,"string"),n("，Terminal实例的名称")],-1),f=e("li",null,[e("strong",null,"说明"),n("：窗口大小变化时触发")],-1);function v(k,b){const o=i("RouteLink"),t=i("CommentService");return s(),a("div",null,[m,e("ul",null,[e("li",null,[g,n("："),u,e("ul",null,[e("li",null,[n("elementInfo: "),l(o,{to:"/zh/others.html#terminalelementinfo"},{default:r(()=>[n("TerminalElementInfo")]),_:1}),n("，窗口信息")]),p])]),f]),l(t)])}const _=c(h,[["render",v],["__file","events.html.vue"]]),y=JSON.parse('{"path":"/zh/events.html","title":"插件事件","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"exec-cmd","slug":"exec-cmd","link":"#exec-cmd","children":[]},{"level":2,"title":"before-exec-cmd","slug":"before-exec-cmd","link":"#before-exec-cmd","children":[]},{"level":2,"title":"init-before","slug":"init-before","link":"#init-before","children":[]},{"level":2,"title":"init-complete","slug":"init-complete","link":"#init-complete","children":[]},{"level":2,"title":"on-keydown","slug":"on-keydown","link":"#on-keydown","children":[]},{"level":2,"title":"on-click","slug":"on-click","link":"#on-click","children":[]},{"level":2,"title":"on-active","slug":"on-active","link":"#on-active","children":[]},{"level":2,"title":"on-inactive","slug":"on-inactive","link":"#on-inactive","children":[]},{"level":2,"title":"on-resize","slug":"on-resize","link":"#on-resize","children":[]}],"git":{"updatedTime":1720188474000,"contributors":[{"name":"tzfun","email":"beifengtz@qq.com","commits":5}]},"filePathRelative":"zh/events.md"}');export{_ as comp,y as data};
