import{_ as u}from"./ele-info-CXOAh1KH.js";import{_ as d,r as p,o as k,c as g,a as l,w as a,d as s,e as n,b as i}from"./app-Cwnlpgeo.js";const m={},v=i(`<h1 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h1><img src="https://shields.io/github/package-json/v/tzfun/vue-web-terminal/vue2" style="margin-right:8px;"><img src="https://shields.io/github/package-json/v/tzfun/vue-web-terminal/vue3" style="margin-right:8px;"><p>本插件提供了一些JS API，可以主动触发或捕获插件的行为，也可以通过这些API模拟用户的部分行为。</p><h2 id="调用方法" tabindex="-1"><a class="header-anchor" href="#调用方法"><span>调用方法</span></a></h2><p>要调用API接口你需要先指定到某一个Terminal实例，再调用相应的API方法，在同一个页面中可能会有多个Terminal实例， 插件区分这些不同的实例就是通过<a href="./attributes#name">name</a>属性来实现的，因此 name 属性应该是全局唯一的。</p><p>有两种方法可以调用对应实例的接口：全局调用、Ref调用</p><h3 id="全局调用" tabindex="-1"><a class="header-anchor" href="#全局调用"><span>全局调用</span></a></h3><p>这种方法可以在任何地方调用到任何一个 name 的Terminal，相比于<code>Ref调用</code>它不需要依赖于Vue的引用传递，相对来说更灵活，但调用它的前提是需要有指定Terminal的name。</p><p>使用方法是通过引入全局API <code>TerminalApi</code> 调用接口，所有接口入参的第一个都是Terminal的name值，之后的参数就是对应接口的参数值。</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>terminal</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-terminal<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>terminal</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">import</span> <span class="token punctuation">{</span> TerminalApi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-web-terminal&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">invokeApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            TerminalApi<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ref调用" tabindex="-1"><a class="header-anchor" href="#ref调用"><span>Ref调用</span></a></h3><p>这种调用方式依赖于Vue中的 Ref 引用，获取到指定Dom的Ref即可调用插件的API，且无需传递Terminal的name值</p>`,13),h=s("div",{class:"language-vue line-numbers-mode","data-highlighter":"prismjs","data-ext":"vue","data-title":"vue"},[s("pre",{class:"language-vue"},[s("code",null,[s("span",{class:"line"},[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("template")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("terminal")]),n(),s("span",{class:"token attr-name"},"name"),s("span",{class:"token attr-value"},[s("span",{class:"token punctuation attr-equals"},"="),s("span",{class:"token punctuation"},'"'),n("my-terminal"),s("span",{class:"token punctuation"},'"')]),n(),s("span",{class:"token attr-name"},"ref"),s("span",{class:"token attr-value"},[s("span",{class:"token punctuation attr-equals"},"="),s("span",{class:"token punctuation"},'"'),n("myTerminalRef"),s("span",{class:"token punctuation"},'"')]),s("span",{class:"token punctuation"},">")]),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("terminal")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("template")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("script")]),s("span",{class:"token punctuation"},">")]),s("span",{class:"token script"},[s("span",{class:"token language-javascript"}),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token keyword"},"export"),n(),s("span",{class:"token keyword"},"default"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token literal-property property"},"methods"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token function"},"invokeApi"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("            "),s("span",{class:"token keyword"},"this"),s("span",{class:"token punctuation"},"."),n("$refs"),s("span",{class:"token punctuation"},"."),n("myTerminalRef"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"pushMessage"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"hello world!"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}"),n("  ")]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})]),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("script")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),b=s("div",{class:"language-vue line-numbers-mode","data-highlighter":"prismjs","data-ext":"vue","data-title":"vue"},[s("pre",{class:"language-vue"},[s("code",null,[s("span",{class:"line"},[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("template")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"},[n("  "),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("terminal")]),n(),s("span",{class:"token attr-name"},"name"),s("span",{class:"token attr-value"},[s("span",{class:"token punctuation attr-equals"},"="),s("span",{class:"token punctuation"},'"'),n("my-terminal"),s("span",{class:"token punctuation"},'"')]),n(),s("span",{class:"token attr-name"},"ref"),s("span",{class:"token attr-value"},[s("span",{class:"token punctuation attr-equals"},"="),s("span",{class:"token punctuation"},'"'),n("myTerminalRef"),s("span",{class:"token punctuation"},'"')]),s("span",{class:"token punctuation"},">")]),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("terminal")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("template")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("script")]),n(),s("span",{class:"token attr-name"},"setup"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token script"},[s("span",{class:"token language-javascript"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"const"),n(" myTerminalRef "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"ref"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"null"),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"const"),n(),s("span",{class:"token function-variable function"},"invokeApi"),n(),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token operator"},"=>"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("  myTerminalRef"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"pushMessage"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"hello world!"'),s("span",{class:"token punctuation"},")")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})]),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("script")]),s("span",{class:"token punctuation"},">")])]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),y=i(`<h2 id="接口方法" tabindex="-1"><a class="header-anchor" href="#接口方法"><span>接口方法</span></a></h2><h3 id="pushmessage" tabindex="-1"><a class="header-anchor" href="#pushmessage"><span>pushMessage</span></a></h3><ul><li><strong>说明</strong>：向Terminal推送一条或多条消息</li><li><strong>定义</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">pushMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Message <span class="token operator">|</span> Message<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>示例</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">//  推送一条文本</span></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//  推送一条消息</span></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;warning&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;WARN&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;This is warning message!&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//  推送多条消息</span></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;message 1&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;message 2&#39;</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;message 3&#39;</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>引用</strong>： <ul><li><a href="./others#message">Message</a></li></ul></li></ul><h3 id="appendmessage" tabindex="-1"><a class="header-anchor" href="#appendmessage"><span>appendMessage</span></a></h3><ul><li><strong>说明</strong>：向最后一条消息追加内容。仅当最后一条消息存在，且其消息类型为 <code>normal</code>、<code>ansi</code>、<code>code</code>、<code>html</code>其中一个时才会追加，否则推送一条新消息。</li><li><strong>定义</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">appendMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>示例</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">appendMessage</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;This is additional content&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="fullscreen" tabindex="-1"><a class="header-anchor" href="#fullscreen"><span>fullscreen</span></a></h3><ul><li><strong>说明</strong>：切换全屏状态</li><li><strong>定义</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">fullscreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>示例</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">fullscreen</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="isfullscreen" tabindex="-1"><a class="header-anchor" href="#isfullscreen"><span>isFullscreen</span></a></h3><ul><li><strong>说明</strong>：判断当前窗口是否处于全屏状态</li><li><strong>定义</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">isFullscreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>示例</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> isFullscreen <span class="token operator">=</span> TerminalApi<span class="token punctuation">.</span><span class="token function">isFullscreen</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isFullscreen<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dragging" tabindex="-1"><a class="header-anchor" href="#dragging"><span>dragging</span></a></h3><ul><li><strong>说明</strong>：当开启拖拽功能时可以使用这种方式来改变窗口位置，其中参数<code>x</code>是terminal左边框到浏览器可视范围左边框的距离，<code>y</code>是terminal上边框到浏览器可视范围上边框的距离，单位px。</li><li><strong>定义</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">dragging</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pos<span class="token operator">:</span> Position<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>示例</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">dragging</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,27),f=s("strong",null,"引用",-1),j=i(`<h3 id="execute" tabindex="-1"><a class="header-anchor" href="#execute"><span>execute</span></a></h3><ul><li><strong>说明</strong>：向Terminal执行一个命令，执行过程会回显在Terminal窗口中，这是一种用JS模拟用户执行命令的方式</li><li><strong>定义</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">execute</span> <span class="token operator">=</span> <span class="token punctuation">(</span>cmd<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>示例</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;help :local&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="focus" tabindex="-1"><a class="header-anchor" href="#focus"><span>focus</span></a></h3><ul><li><strong>说明</strong>：获取Terminal输入焦点，插件内有三处输入点： <ul><li>命令行输入，focus方法传入 true 则表示强制获取输入焦点，否则只会获得光标焦点并使terminal触发on-active事件。</li><li>Ask用户输入，当处于ask模式下获取相应的输入焦点</li><li>文本编辑器输入，当处于文本编辑模式下获取相应的输入框焦点，如果你用了slot来自定义实现，需要在slot中提供focus事件的入口</li></ul></li><li><strong>定义</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">focus</span> <span class="token operator">=</span> <span class="token punctuation">(</span>enforceFocus<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> MouseEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>示例</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="elementinfo" tabindex="-1"><a class="header-anchor" href="#elementinfo"><span>elementInfo</span></a></h3><ul><li><strong>说明</strong>：获取Terminal窗口DOM信息，你可以通过此 API 获取Terminal的窗口宽度高度、显示内容的宽度高度、所在位置、单字符宽度等，单位为px</li></ul><div class="hint-container tip"><p class="hint-container-title">注意</p><p>如果你的窗口已创建但未显示在页面（比如用了v-show控制显示），可能会出现部分信息失效的问题。</p></div><ul><li><strong>定义</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">elementInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TerminalElementInfo<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>示例</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">let</span> info <span class="token operator">=</span> TerminalApi<span class="token punctuation">.</span><span class="token function">elementInfo</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>结果示例</strong>：</li></ul><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;pos&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;x&quot;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;y&quot;</span><span class="token operator">:</span> <span class="token number">100</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;screenWidth&quot;</span><span class="token operator">:</span> <span class="token number">700</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;screenHeight&quot;</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;clientWidth&quot;</span><span class="token operator">:</span> <span class="token number">690</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;clientHeight&quot;</span><span class="token operator">:</span> <span class="token number">490</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;charWidth&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;en&quot;</span><span class="token operator">:</span> <span class="token number">7.2</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;cn&quot;</span><span class="token operator">:</span> <span class="token number">14</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>引用</strong>： <ul><li><a href="./others#position">Position</a></li><li><a href="./others#charwidth">CharWidth</a></li><li><a href="./others#terminalelementinfo">TerminalElementInfo</a></li></ul></li></ul><p>下面这张图清晰地描述了这些值的含义： <img src="`+u+`" alt="terminal-ele-info"></p><h3 id="texteditoropen" tabindex="-1"><a class="header-anchor" href="#texteditoropen"><span>textEditorOpen</span></a></h3><ul><li><strong>说明</strong>：打开文本编辑器，打开时可以传入初始文本内容，并定义关闭事件回调。<code>content</code>是打开编辑器时预置的内容，如果你不想预置任何内容可以不填此参数，当用户点击Close或主动调用 <code>textEditorClose()</code> 方法时会触发<code>onClose</code>回调，参数value为当前编辑器内的文本内容和传入参数选项。</li><li><strong>定义</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">textEditorOpen</span> <span class="token operator">=</span> <span class="token punctuation">(</span>setting<span class="token operator">:</span> EditorSetting<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>示例</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">textEditorOpen</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;This is the preset content&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">onClose</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Final content: &#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token string">&quot;options:&quot;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>引用</strong>： <ul><li><a href="./others#editorsetting">EditorSetting</a></li></ul></li></ul><h3 id="texteditorclose" tabindex="-1"><a class="header-anchor" href="#texteditorclose"><span>textEditorClose</span></a></h3><ul><li><strong>说明</strong>：关闭当前打开的文本编辑器，调用后会触发打开时的onClose回调，options值会作为参数传给回调函数。</li><li><strong>定义</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">textEditorClose</span> <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>示例</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">textEditorClose</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">textEditorClose</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello! this is close options&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clearlog" tabindex="-1"><a class="header-anchor" href="#clearlog"><span>clearLog</span></a></h3><ul><li><strong>说明</strong>：清除当前屏幕日志，如果传入参数为 true 则同时清除历史指令记录</li><li><strong>定义</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">clearLog</span> <span class="token operator">=</span> <span class="token punctuation">(</span>clearCommandHistory<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>示例</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">//  clear screen log</span></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">clearLog</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//  clear command history log</span></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">clearLog</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getcommand" tabindex="-1"><a class="header-anchor" href="#getcommand"><span>getCommand</span></a></h3><ul><li><strong>说明</strong>：获取当前正在输入的指令</li><li><strong>定义</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">getCommand</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>示例</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="setcommand" tabindex="-1"><a class="header-anchor" href="#setcommand"><span>setCommand</span></a></h3><ul><li><strong>说明</strong>：修改当前正在输入的指令</li><li><strong>定义</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">setCommand</span> <span class="token operator">=</span> <span class="token punctuation">(</span>command<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>示例</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;customCmd -a hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="switchallfoldstate" tabindex="-1"><a class="header-anchor" href="#switchallfoldstate"><span>switchAllFoldState</span></a></h3><ul><li><strong>说明</strong>：折叠或展开所有命令分组</li><li><strong>定义</strong>：</li></ul><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">switchAllFoldState</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>示例</strong>：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 折叠所有命令分组</span></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">switchAllFoldState</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 展开所有命令分组</span></span>
<span class="line">TerminalApi<span class="token punctuation">.</span><span class="token function">switchAllFoldState</span><span class="token punctuation">(</span><span class="token string">&#39;my-terminal&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52);function x(w,T){const o=p("CodeTabs"),c=p("RouteLink"),r=p("CommentService");return k(),g("div",null,[v,l(o,{id:"32",data:[{id:"Vue2"},{id:"Vue3"}],"tab-id":"vue"},{title0:a(({value:e,isActive:t})=>[n("Vue2")]),title1:a(({value:e,isActive:t})=>[n("Vue3")]),tab0:a(({value:e,isActive:t})=>[h]),tab1:a(({value:e,isActive:t})=>[b]),_:1}),y,s("ul",null,[s("li",null,[f,n("： "),s("ul",null,[s("li",null,[l(c,{to:"/zh/others.html#position"},{default:a(()=>[n("Position")]),_:1})])])])]),j,l(r)])}const _=d(m,[["render",x],["__file","api.html.vue"]]),C=JSON.parse('{"path":"/zh/api.html","title":"API","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"调用方法","slug":"调用方法","link":"#调用方法","children":[{"level":3,"title":"全局调用","slug":"全局调用","link":"#全局调用","children":[]},{"level":3,"title":"Ref调用","slug":"ref调用","link":"#ref调用","children":[]}]},{"level":2,"title":"接口方法","slug":"接口方法","link":"#接口方法","children":[{"level":3,"title":"pushMessage","slug":"pushmessage","link":"#pushmessage","children":[]},{"level":3,"title":"appendMessage","slug":"appendmessage","link":"#appendmessage","children":[]},{"level":3,"title":"fullscreen","slug":"fullscreen","link":"#fullscreen","children":[]},{"level":3,"title":"isFullscreen","slug":"isfullscreen","link":"#isfullscreen","children":[]},{"level":3,"title":"dragging","slug":"dragging","link":"#dragging","children":[]},{"level":3,"title":"execute","slug":"execute","link":"#execute","children":[]},{"level":3,"title":"focus","slug":"focus","link":"#focus","children":[]},{"level":3,"title":"elementInfo","slug":"elementinfo","link":"#elementinfo","children":[]},{"level":3,"title":"textEditorOpen","slug":"texteditoropen","link":"#texteditoropen","children":[]},{"level":3,"title":"textEditorClose","slug":"texteditorclose","link":"#texteditorclose","children":[]},{"level":3,"title":"clearLog","slug":"clearlog","link":"#clearlog","children":[]},{"level":3,"title":"getCommand","slug":"getcommand","link":"#getcommand","children":[]},{"level":3,"title":"setCommand","slug":"setcommand","link":"#setcommand","children":[]},{"level":3,"title":"switchAllFoldState","slug":"switchallfoldstate","link":"#switchallfoldstate","children":[]}]}],"git":{"updatedTime":1720188474000,"contributors":[{"name":"tzfun","email":"beifengtz@qq.com","commits":6}]},"filePathRelative":"zh/api.md"}');export{_ as comp,C as data};
