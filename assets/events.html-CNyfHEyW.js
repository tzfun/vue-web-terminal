import{_ as a,c as r,a as c,e as n,f as i,b as t,d,r as l,o as m}from"./app-BeRk4fU8.js";const h={};function g(u,e){const o=l("RouteLink"),s=l("CommentService");return m(),r("div",null,[e[8]||(e[8]=c('<h1 id="events" tabindex="-1"><a class="header-anchor" href="#events"><span>Events</span></a></h1><img src="https://shields.io/github/package-json/v/tzfun/vue-web-terminal/vue2" style="margin-right:8px;"><img src="https://shields.io/github/package-json/v/tzfun/vue-web-terminal/vue3" style="margin-right:8px;"><h2 id="exec-cmd" tabindex="-1"><a class="header-anchor" href="#exec-cmd"><span>exec-cmd</span></a></h2><ul><li><strong>Parameters</strong>: <code>(commandKey, command, success, failed, name)</code><ul><li>commandKey: <code>string</code>, command key.</li><li>command: <code>string</code>, the complete command line entered by the user.</li><li>success: <code>(message?: Message | Array&lt;Message&gt; | string | TerminalFlash | TerminalAsk) =&gt; void; </code>, success callback function.</li><li>failed: <code>(message: string) =&gt; void;</code>, failure callback function.</li><li>name: <code>string</code>, the name of the Terminal instance.</li></ul></li><li><strong>Description</strong>: This event is triggered when a custom command is executed. <strong>After this event is triggered, one of the success or failed callbacks must be called to consider the execution completed, otherwise the command input line will not be echoed</strong>.</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The success callback parameter supports multiple data types, and the execution logic of different data types will be different:</p><ul><li>Without passing any parameters, the execution ends immediately.</li><li>Passing a message object <a href="./others#Message">Message</a> will append a message to the log and immediately terminate the execution.</li><li>Passing an array of message objects <a href="./others#Message">Message</a>[] will append multiple messages to the log and immediately terminate the execution.</li><li>Passing a <code>TerminalFlash</code> object will enter the real-time echo processing logic. This execution will not end until <code>finish()</code> is called.</li><li>Passing a <code>TerminalAsk</code> object will enter the user query input processing logic. This execution will not end until <code>finish()</code> is called.</li></ul></div><h2 id="before-exec-cmd" tabindex="-1"><a class="header-anchor" href="#before-exec-cmd"><span>before-exec-cmd</span></a></h2><ul><li><strong>Parameters</strong>: <code>(commandKey, command, name)</code><ul><li>commandKey: <code>string</code>, command key.</li><li>command: <code>string</code>, the complete command line entered by the user.</li><li>name: <code>string</code>, the name of the Terminal instance.</li></ul></li><li><strong>Description</strong>: Triggered after the user presses Enter, before the command is actually executed.</li></ul><h2 id="init-before" tabindex="-1"><a class="header-anchor" href="#init-before"><span>init-before</span></a></h2><ul><li><strong>Parameters</strong>: <code>(name)</code></li><li><strong>Description</strong>: Lifecycle function, triggered before the plugin is initialized.</li></ul><h2 id="init-complete" tabindex="-1"><a class="header-anchor" href="#init-complete"><span>init-complete</span></a></h2><ul><li><strong>Parameters</strong>: <code>(name)</code></li><li><strong>Description</strong>: Lifecycle function, triggered after the plugin is initialized.</li></ul><h2 id="on-keydown" tabindex="-1"><a class="header-anchor" href="#on-keydown"><span>on-keydown</span></a></h2><ul><li><strong>Parameters</strong>: <code>(event, name)</code><ul><li>event: <code>KeyboardEvent</code>, native keyboard events.</li><li>name: <code>string</code>, the name of the Terminal instance.</li></ul></li><li><strong>Description</strong>: Triggered when any key is pressed while obtaining the command input cursor focus.</li></ul><h2 id="on-click" tabindex="-1"><a class="header-anchor" href="#on-click"><span>on-click</span></a></h2><ul><li><strong>Parameters</strong>: <code>(key, name)</code><ul><li>key: <code>string</code>, button name.</li><li>name: <code>string</code>, the name of the Terminal instance.</li></ul></li><li><strong>Description</strong>: Triggered when the user clicks a button. The parameter key is the unique identifier of the button. Here are some existing buttons: <code>close | minScreen | fullScreen | title | pin</code></li></ul><h2 id="on-active" tabindex="-1"><a class="header-anchor" href="#on-active"><span>on-active</span></a></h2><ul><li><strong>Parameters</strong>: <code>(name)</code></li><li><strong>Description</strong>: Triggered when the window becomes active.</li></ul><h2 id="on-inactive" tabindex="-1"><a class="header-anchor" href="#on-inactive"><span>on-inactive</span></a></h2><ul><li><strong>Parameters</strong>: <code>(name)</code></li><li><strong>Description</strong>: Triggered when the window changes from active to inactive.</li></ul><h2 id="on-resize" tabindex="-1"><a class="header-anchor" href="#on-resize"><span>on-resize</span></a></h2>',21)),n("ul",null,[n("li",null,[e[4]||(e[4]=n("strong",null,"Parameters",-1)),e[5]||(e[5]=i("：")),e[6]||(e[6]=n("code",null,"(elementInfo, name)",-1)),n("ul",null,[n("li",null,[e[1]||(e[1]=i("elementInfo: ")),t(o,{to:"/others.html#terminalelementinfo"},{default:d(()=>e[0]||(e[0]=[i("TerminalElementInfo")])),_:1}),e[2]||(e[2]=i(", window info"))]),e[3]||(e[3]=n("li",null,[i("name: "),n("code",null,"string"),i(", the name of the Terminal instance.")],-1))])]),e[7]||(e[7]=n("li",null,[n("strong",null,"Description"),i("：Triggered when the window size changes.")],-1))]),t(s)])}const f=a(h,[["render",g],["__file","events.html.vue"]]),v=JSON.parse('{"path":"/events.html","title":"Events","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"exec-cmd","slug":"exec-cmd","link":"#exec-cmd","children":[]},{"level":2,"title":"before-exec-cmd","slug":"before-exec-cmd","link":"#before-exec-cmd","children":[]},{"level":2,"title":"init-before","slug":"init-before","link":"#init-before","children":[]},{"level":2,"title":"init-complete","slug":"init-complete","link":"#init-complete","children":[]},{"level":2,"title":"on-keydown","slug":"on-keydown","link":"#on-keydown","children":[]},{"level":2,"title":"on-click","slug":"on-click","link":"#on-click","children":[]},{"level":2,"title":"on-active","slug":"on-active","link":"#on-active","children":[]},{"level":2,"title":"on-inactive","slug":"on-inactive","link":"#on-inactive","children":[]},{"level":2,"title":"on-resize","slug":"on-resize","link":"#on-resize","children":[]}],"git":{"updatedTime":1720188474000,"contributors":[{"name":"tzfun","email":"beifengtz@qq.com","commits":3}]},"filePathRelative":"events.md"}');export{f as comp,v as data};
